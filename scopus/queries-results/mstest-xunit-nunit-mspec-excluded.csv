Title,Abstract,Authors,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Link,Author Keywords,Index Keywords,Publisher
Automated unit testing of a SCADA control software: An industrial case study based on action research,We report in this case-study paper our experience and success story with a practical approach and tool for unit regression testing of a SCADA (Supervisory Control and Data Acquisition) software. The tool uses a black-box specification of the units under test to automatically generate NUnit test code. We then improved the test suite by white-box and mutation testing. The approach and tool were developed in an action-research project to test a commercial large-scale SCADA system called Rocket. © 2012 IEEE.,"Jolly S.A., Garousi V., Eskandar M.M.",2012,"Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICST 2012",,,6200132,400,409,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862330838&doi=10.1109%2fICST.2012.120&partnerID=40&md5=e531e9e69840f9dc2fcf9660bf5c7dbf,action research; automated unit testing; industrical case study; SCADA software,Action research; Automated units; Black boxes; Control software; Industrial case study; industrical case study; Mutation testing; Regression testing; Supervisory control and data acquisition; Test code; Tool use; Units under tests; Industrial applications; Research; SCADA systems; Software testing,
A survey of software testing practices in Canada,"Software testing is an important activity in the software development life-cycle. In an earlier study in 2009, we reported the results of a regional survey of software testing practices among practitioners in the Canadian province of Alberta. To get a larger nationwide view on this topic (across Canada), we conducted a newer survey with a revised list of questions in 2010. Compared to our previous Alberta-wide survey (53 software practitioners), the nation-wide survey had larger number of participants (246 practitioners). We report the survey design, execution and results in this article. The survey results reveal important and interesting findings about software testing practices in Canada. Whenever possible, we also compare the results of this survey to other similar studies, such as the ones conducted in the US, Sweden and Australia, and also two previous Alberta-wide surveys, including our 2009 survey. The results of our survey will be of interest to testing professionals both in Canada and world-wide. It will also benefit researchers in observing the latest trends in software testing industry identifying the areas of strength and weakness, which would then hopefully encourage further industry-academia collaborations in this area. Among the findings are the followings: (1) the importance of testing-related training is increasing, (2) functional and unit testing are two common test types that receive the most attention and efforts spent on them, (3) usage of the mutation testing approach is getting attention among Canadian firms, (4) traditional Test-last Development (TLD) style is still dominating and a few companies are attempting the new development approaches such as Test-Driven Development (TDD), and Behavior-Driven Development (BDD), (5) in terms of the most popular test tools, NUnit and Web application testing tools overtook JUnit and IBM Rational tools, (6) most Canadian companies use a combination of two coverage metrics: decision (branch) and condition coverage, (7) number of passing user acceptance tests and number of defects found per day (week or month) are regarded as the most important quality assurance metrics and decision factors to release, (8) in most Canadian companies, testers are out-numbered by developers, with ratios ranging from 1:2 to 1:5, (9) the majority of Canadian firms spent less than 40% of their efforts (budget and time) on testing during development, and (10) more than 70% of respondents participated in online discussion forums related to testing on a regular basis. © 2012 Elsevier Inc.","Garousi V., Zhi J.",2013,Journal of Systems and Software,86,5,,1354,1376,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875265017&doi=10.1016%2fj.jss.2012.12.051&partnerID=40&md5=f4f6e01e3cf6ff84d6cf9d86aaa265cc,Canada; Industry practices; Software testing; Survey,Acceptance tests; Budget control; Computer programming; Life cycle; Quality assurance; Software design; Surveying; Surveys; Canada; Development approach; Industry practices; Online discussion forums; Software development life cycle; Software practitioners; Test driven development; Web application testing; Software testing,Elsevier Inc.
Effective unit testing framework for automation of windows applications,"The major concern of software industry is software quality and reliability. Unit Testing is a practical approach to improve the quality and reliability of a software. Unit testing is usually performed by programmers and is the base for all other tests such as integration testing and system testing. Unit Testing can be done manually (and/or) automatically. This paper presents ""White.NUnit"" framework that automates the unit testing of windows applications. The automated unit tests are written by the developers after the completion of functionality coding. We found that the number of defects got reduced when automated unit tests are written iteratively similar to test driven development. This framework proved that significant portions of windows application can be automatically tested without manual intervention. This reduces the Manpower involved in testing each and every unit of the application and increases the quality of the software product. © 2013 Springer.","Seshu Kumar A.N., Vasavi S.",2013,Advances in Intelligent Systems and Computing,174 AISC,,,813,822,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871286377&doi=10.1007%2f978-81-322-0740-5_97&partnerID=40&md5=5cf1b980dec5bf520425d8c8b0f49c6c,,Automation; Computer software selection and evaluation; Software engineering; Software reliability; Automated units; Integration testing; Manual intervention; Software industry; Software products; Software Quality; System testing; Test driven development; Unit testing; Unit testing frameworks; Windows application; Software testing,Springer Verlag
Design of unit testing using xUnit.net,"This paper presents an in-depth study of designing, implementing and executing unit test cases using the xUnit.net testing tool in general and in the context of the TeleMedicine Cluster System project within the ICT Design subject delivered at UTS, Australia. The case studies are based on the utilisation of the tool in Visual Basic 2012 using the.NET framework for C#. The paper elucidates on how and why the xUnit framework can be applied in the context of the TMC system, and how it can be tailored to meet the testing ad integration needs of the delivery of TMC system. © 2014 IEEE.","Chaczko Z., Braun R., Carrion L., Dagher J.",2014,ITHET 2014 - 13th International Conference on Information Technology Based Higher Education and Training,,,7155685,,,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943311889&doi=10.1109%2fITHET.2014.7155685&partnerID=40&md5=214b6d850168cfb89ce7748523154a86,Automated Testing; Software Development Process; Unit Testing,Education; Engineering education; Software design; Software engineering; Software testing; Automated testing; Case-studies; Cluster systems; In-depth study; Software development process; Testing tools; Unit testing; Unit tests; Integration testing,Institute of Electrical and Electronics Engineers Inc.
Test case prioritization for NUnit based test plans in agile environment,"Test Case prioritization having a key role to play in prioritizing test scenarios from a pile of scenarios, to best of our knowledge, has not been employed in Agile environment for prioritizing test cases in Automated Test Plans. Considering automated testing in agile environment esp scrum, a prioritized test plan containing high priority test cases is emanated using Genetic Algorithms. This prioritization is courtesy to base factors such as operational profile, test scenario criticality, and faults uncovered by each test case; used to weight test scenarios. Proposed technique exhibits great performance by ameliorating the rate of fault detection by dynamically prioritizing NUnit based test scenarios. © Springer International Publishing Switzerland 2014.","Sarwar S., Mahmood Y., Qayyum Z.U., Shafi I.",2014,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),8722,,,246,253,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921854226&doi=10.1007%2f978-3-319-10554-3_25&partnerID=40&md5=b4c54512a7fb7372c5bb1237b67c5b7b,Agile Testing; Automated Test Plans; Genetic Algorithms; Regression Testing; Test Case Prioritization,Automation; Fault detection; Genetic algorithms; Piles; Software testing; Agile manufacturing systems; Artificial intelligence; Agile environment; Agile testing; Automated test; Automated testing; Operational profile; Prioritization; Regression testing; Test case prioritization; Testing,Springer Verlag
Test automation for NFC ICs using Jenkins and NUnit,"This article gives a detailed overview of the setup of a test environment which is used for Near Field Communication (NFC) Integrated Circuits (ICs) at ams AG. The test environment is used for the verification and validation of the NFC ICs, as well as for pre-certification test runs, and is useable in two ways: (1) manual execution for every developer to be able to run tests on their desk before committing code changes and to reproduce failing test cases and (2) automated execution which is necessary for the Continuous Integration (CI) approach which is followed during development and to ensure that all tests are run against the Device Under Test (DUT). First a description of the system which shall be tested is given. Afterwards the used tools and methods to execute the various test benches are discussed. The hurdles which showed up during the process of setting up the environment for manual as well as automated execution are explained and the used solution is discussed. © 2015 IEEE.",Puri-Jobi S.,2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",,,7107414,,,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934344195&doi=10.1109%2fICSTW.2015.7107414&partnerID=40&md5=390fde48f8a4b6ae69472826d46dfbfc,Jenkins; NFC; NUnit; test automation,Automation; Design for testability; Integrated circuits; Near field communication; Timing circuits; Verification; Certification tests; Continuous integrations; Integrated circuits (ICs); Jenkins; NUnit; Test Automation; The near field communication (NFC); Verification-and-validation; Software testing,Institute of Electrical and Electronics Engineers Inc.
"Real-Time web application development: With ASP.NET core, SignalR, docker, and azure","Design, develop, and deploy a real-world web application by leveraging modern open source technologies. This book shows you how to use ASP.NET Core to build cross-platform web applications along with SignalR to enrich the application by enabling real-time communication between server and clients. You will use Docker to containerize your application, integrate with GitHub to package the application, and provide continuous deployment to Azure’s IaaS platform. Along the way, Real-Time Web Application Development covers topics including designing a Materialize CSS theme, using a test-driven development approach with xUnit.net, and securing your application with the OAuth 2.0 protocol. To further your understanding of the technology, you will learn logging and exception handling; navigation using view components; and how to work with forms and validations. The rich code samples from this book can be used to retrofit or upgrade existing ASP.NET Core applications. What You Will Learn Design and develop a real-world web application Implement security and data storage with OAuth2 and Azure Table StorageOrchestrate real-time notifications through SignalRUse GitHub and Travis CI for continuous integration of code Master Docker containerization and continuous deployment with Docker Cloud to Azure Linux virtual machines. Who This Book Is For Developers and software engineers interested in learning an end-to-end approach to application development using Microsoft technologies. © 2017 by Rami Vemula.",Vemula R.,2018,"Real-Time Web Application Development: With ASP.NET Core, SignalR, Docker, and Azure",,,,1,598,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042424900&doi=10.1007%2f978-1-4842-3270-5&partnerID=40&md5=df41eedb9d23853a58658f1fca199cdb,.Net; .Netcore; ASP.Net; Azure; Core; Docker; Realtime; Signalr; Webdev,Application programs; Computer operating systems; Containers; Digital storage; Open source software; .Net; .Netcore; ASP.NEt; Azure; Core; Docker; Real time; Signalr; Webdev; Web services,Apress Media LLC
Automating Web Application Testing from the Ground Up: Experiences and Lessons Learned in an Industrial Setting,"Automating web application testing is a very tricky process due to inherent complexity, dynamic behavior(s) in web pages, differences in the way browsers render the same content (especially on different form factors), and so on. Yet manual testing is not a practical option, and such automation is a must in the interests of effectiveness and efficiency, because of the large number of browsers/devices that users can choose from, and also given the rapid software development cycles of today. This paper discusses our efforts at Varidesk to automate web tests against our main website-which offers many features and content, but is also a true eCommerce site where users from around the globe can purchase a very broad variety of active workspace solutions that we offer. Our solution was developed in-house, from the ground up, and leveraged and extended freely available automation and test libraries such as Selenium WebDriver and NUnit respectively. We talk about the challenges we faced and how we overcame them, as well as provide technical insights on real-world concerns such as managing test brittleness, and integrating the web tests into an existing Continuous Integration and Continuous Deployment (CI/CD) pipeline. Part of the novelty of this paper is that we are also transparent on the rationale behind our decision to build versus buy, and how we managed resources, especially in terms of cost. We also present lessons learned, and encouraged by the success that we have observed, hope that the results will be beneficial to academia and practitioners alike. © 2018 IEEE.","Debroy V., Brimble L., Yost M., Erry A.",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,354,362,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048453978&doi=10.1109%2fICST.2018.00042&partnerID=40&md5=ec31fbfde0ac7dd7dbeed5636d1bc145,automation; industry experience; web application testing; web testing,Automation; Digital libraries; Fracture mechanics; Software design; Verification; Websites; Continuous integrations; Effectiveness and efficiencies; Industrial settings; Industry experience; Inherent complexity; Software development cycles; Web application testing; Web testing; Software testing,Institute of Electrical and Electronics Engineers Inc.

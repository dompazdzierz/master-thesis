Authors,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Link,Abstract,Author Keywords,Index Keywords,Publisher
"Jolly S.A., Garousi V., Eskandar M.M.","Automated unit testing of a SCADA control software: An industrial case study based on action research",2012,"Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICST 2012",,,"6200132","400","409",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84862330838&doi=10.1109%2fICST.2012.120&partnerID=40&md5=e531e9e69840f9dc2fcf9660bf5c7dbf","We report in this case-study paper our experience and success story with a practical approach and tool for unit regression testing of a SCADA (Supervisory Control and Data Acquisition) software. The tool uses a black-box specification of the units under test to automatically generate NUnit test code. We then improved the test suite by white-box and mutation testing. The approach and tool were developed in an action-research project to test a commercial large-scale SCADA system called Rocket. © 2012 IEEE.","action research; automated unit testing; industrical case study; SCADA software","Action research; Automated units; Black boxes; Control software; Industrial case study; industrical case study; Mutation testing; Regression testing; Supervisory control and data acquisition; Test code; Tool use; Units under tests; Industrial applications; Research; SCADA systems; Software testing",
"Mukkavilli L.","Smart unit testing framework",2012,"Proceedings - 23rd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2012",,,"6407378","70","79",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84873369739&doi=10.1109%2fISSREW.2012.45&partnerID=40&md5=5035e9f7865252bb03b813d463976b2e","Unit testing(UT) is an important step in ensuring the quality of software. Considerable effort is spent in unit testing. There are several frameworks to help with UT. Some common frameworks are Cunit, Junit, Nunit etc. All of these have very similar capabilities. They provide capabilities for organizing and registering tests, registration of test initializers and finalizers, test execution and asserting the test outcome and reporting the summary. The actual task of bug finding is left to the user. Users write the code to perform the tests and check the outcome. A common characteristic of the unit tests is that the fraction of the code that actually performs the tests is small. The bulk of the test code was for bookkeeping. My observation is that most tests are very basic. Mostly they are API/functions calls. We were very concerned about the ROI (Return on Investment). A significant percentage of the CFD's (Customer Found Defects) were identified as UT escapes. I started looking at enhancing the value of unit testing. I designed and built a new unit testing framework. My goals were to maximize bug finding capabilities while reducing the effort in creating the tests. The new framework has direct support for Fault Injection, automatic generation of API robustness tests, code coverage, MBT (Model Based Testing), performance and scalability testing. The model used for defining a test is a directed graph. Every test is structured as a directed graph. Evaluation of the new framework was performed by using two features for which unit tests were written in one of the standard UT frameworks. These UT efforts were considered to be very good. The same features were tested using the new framework. No new test code was added. Here are the results: Feature 1 - The original tests found 8 bugs. The new framework found 24 bugs. Included in these 24 are the 8 bugs that were originally found. Of the remaining 16 bugs, 8 were API robustness failures. 5 bugs were bugs in the error handling code (two of these 5 pointed at missing error handling code). 3 bugs were uncovered due to the sequencing of the original tests. Since the tests are embedded in a directed graph, the testing involved traversal of various paths. Code coverage (statement coverage) increased by about 8%. The number of lines in the test code decreased by about 50%. Feature 2 - The original tests found 10 bugs. The new framework found 30 bugs. Included in these 30 are the 10 bugs found originally. Of the remaining 20 bugs, 12 were API robustness failures. Four were bugs in the error handling code (two of the 4 pointed at missing error handling code). Four bugs were uncovered due to the sequencing of the original tests. Since the tests are embedded in a directed graph, testing involved traversal of various paths. Code coverage (statement coverage) increased by about 10%. The number of lines in the test code decreased by about 50%. The new UT or whitebox testing framework is being used in several projects. Testers use the framework for whitebox testing. Unique features of the new framework like API robustness test generation, Fault Injection, MBT, performance/scalability analysis have accounted for about 70% of the bugs found during unit testing. [This work was performed while I was at Cisco systems. © 2012 IEEE.",,"Automatic Generation; Bug finding; Cisco system; Code coverage; Customer found defect; Error handling codes; Fault injection; Finalizers; Initializers; Model based testing; Quality of softwares; Return on investments; Smart units; Statement coverage; Test code; Test execution; Test generations; Unique features; Unit testing; Unit testing frameworks; Unit tests; White-box testing; Profitability; Robustness (control systems); Software reliability; Software testing; Technical presentations; Directed graphs",
"Mateo M., Bailey III J.I., Crane J., Shectman S., Thompson I., Roederer I., Bigelow B., Gunnels S.","M2FS: The Michigan/Magellan fiber system",2012,"Proceedings of SPIE - The International Society for Optical Engineering","8446",,"84464Y","","",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871959783&doi=10.1117%2f12.926448&partnerID=40&md5=995fb11e2778f68d8e36041304c3bdbe","We describe the Michigan/Magellan Fiber System (M2FS) under construction for use on the Magellan/Clay telescope. M2FS consists of four primary components including: (1) A fiber-fed double spectrograph (MSPec) in which each spectrograph is fed by 128 fibers (for a total multiplexing factor of 256) and each is optimized in to operate from 370-950 nm; (2) A fiber mounting system (MFib) that supports the fibers and fiber plug plates at the telescope f/11 Nasmyth focal surface and organizes the fibers into 'shoes' that are used to place the fibers at the image surface of the MSpec spectrographs;, (3) A new wide-field corrector (WFC) that produces high-quality images over a 30 arcmin diameter field; (4) A unit (MCal) mounted near the telescope secondary that provides wavelength and continuum calibration and that supports a key component in a novel automated fiber identification system. We describe the opto-mechanical properties of M2FS, its modes of operation, and its anticipated performance, as well as potential upgrades including the development of a robotic fiber positioner and an atmospheric dispersion corrector. We describe how the M2FS design could serve as the basis of a powerful wide-field, massively multiplexed spectroscopic survey facility. © 2012 SPIE.","Fiber optics; Ground-Based telescopes; Multi-Object spectrographs; Spectroscopy","Atmospheric Dispersion Correctors; Fiber mounting; Fiber positioner; Fiber systems; Focal surfaces; Ground-based telescopes; High quality images; Image surface; Magellan; Michigan; Modes of operation; Multi-object spectrograph; Optomechanical; Spectroscopic surveys; Wide-field; Astronomy; Atmospheric movements; Fiber optics; Mechanical properties; Mountings; Multiplexing; Optical telescopes; Spectrographs; Spectroscopy; Telescopes; Fibers",
"Garousi V., Zhi J.","A survey of software testing practices in Canada",2013,"Journal of Systems and Software","86","5",,"1354","1376",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875265017&doi=10.1016%2fj.jss.2012.12.051&partnerID=40&md5=f4f6e01e3cf6ff84d6cf9d86aaa265cc","Software testing is an important activity in the software development life-cycle. In an earlier study in 2009, we reported the results of a regional survey of software testing practices among practitioners in the Canadian province of Alberta. To get a larger nationwide view on this topic (across Canada), we conducted a newer survey with a revised list of questions in 2010. Compared to our previous Alberta-wide survey (53 software practitioners), the nation-wide survey had larger number of participants (246 practitioners). We report the survey design, execution and results in this article. The survey results reveal important and interesting findings about software testing practices in Canada. Whenever possible, we also compare the results of this survey to other similar studies, such as the ones conducted in the US, Sweden and Australia, and also two previous Alberta-wide surveys, including our 2009 survey. The results of our survey will be of interest to testing professionals both in Canada and world-wide. It will also benefit researchers in observing the latest trends in software testing industry identifying the areas of strength and weakness, which would then hopefully encourage further industry-academia collaborations in this area. Among the findings are the followings: (1) the importance of testing-related training is increasing, (2) functional and unit testing are two common test types that receive the most attention and efforts spent on them, (3) usage of the mutation testing approach is getting attention among Canadian firms, (4) traditional Test-last Development (TLD) style is still dominating and a few companies are attempting the new development approaches such as Test-Driven Development (TDD), and Behavior-Driven Development (BDD), (5) in terms of the most popular test tools, NUnit and Web application testing tools overtook JUnit and IBM Rational tools, (6) most Canadian companies use a combination of two coverage metrics: decision (branch) and condition coverage, (7) number of passing user acceptance tests and number of defects found per day (week or month) are regarded as the most important quality assurance metrics and decision factors to release, (8) in most Canadian companies, testers are out-numbered by developers, with ratios ranging from 1:2 to 1:5, (9) the majority of Canadian firms spent less than 40% of their efforts (budget and time) on testing during development, and (10) more than 70% of respondents participated in online discussion forums related to testing on a regular basis. © 2012 Elsevier Inc.","Canada; Industry practices; Software testing; Survey","Acceptance tests; Budget control; Computer programming; Life cycle; Quality assurance; Software design; Surveying; Surveys; Canada; Development approach; Industry practices; Online discussion forums; Software development life cycle; Software practitioners; Test driven development; Web application testing; Software testing","Elsevier Inc."
"Seshu Kumar A.N., Vasavi S.","Effective unit testing framework for automation of windows applications",2013,"Advances in Intelligent Systems and Computing","174 AISC",,,"813","822",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871286377&doi=10.1007%2f978-81-322-0740-5_97&partnerID=40&md5=5cf1b980dec5bf520425d8c8b0f49c6c","The major concern of software industry is software quality and reliability. Unit Testing is a practical approach to improve the quality and reliability of a software. Unit testing is usually performed by programmers and is the base for all other tests such as integration testing and system testing. Unit Testing can be done manually (and/or) automatically. This paper presents ""White.NUnit"" framework that automates the unit testing of windows applications. The automated unit tests are written by the developers after the completion of functionality coding. We found that the number of defects got reduced when automated unit tests are written iteratively similar to test driven development. This framework proved that significant portions of windows application can be automatically tested without manual intervention. This reduces the Manpower involved in testing each and every unit of the application and increases the quality of the software product. © 2013 Springer.",,"Automation; Computer software selection and evaluation; Software engineering; Software reliability; Automated units; Integration testing; Manual intervention; Software industry; Software products; Software Quality; System testing; Test driven development; Unit testing; Unit testing frameworks; Windows application; Software testing","Springer Verlag"
"Chaczko Z., Braun R., Carrion L., Dagher J.","Design of unit testing using xUnit.net",2014,"ITHET 2014 - 13th International Conference on Information Technology Based Higher Education and Training",,,"7155685","","",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943311889&doi=10.1109%2fITHET.2014.7155685&partnerID=40&md5=214b6d850168cfb89ce7748523154a86","This paper presents an in-depth study of designing, implementing and executing unit test cases using the xUnit.net testing tool in general and in the context of the TeleMedicine Cluster System project within the ICT Design subject delivered at UTS, Australia. The case studies are based on the utilisation of the tool in Visual Basic 2012 using the.NET framework for C#. The paper elucidates on how and why the xUnit framework can be applied in the context of the TMC system, and how it can be tailored to meet the testing ad integration needs of the delivery of TMC system. © 2014 IEEE.","Automated Testing; Software Development Process; Unit Testing","Education; Engineering education; Software design; Software engineering; Software testing; Automated testing; Case-studies; Cluster systems; In-depth study; Software development process; Testing tools; Unit testing; Unit tests; Integration testing","Institute of Electrical and Electronics Engineers Inc."
"Sarwar S., Mahmood Y., Qayyum Z.U., Shafi I.","Test case prioritization for NUnit based test plans in agile environment",2014,"Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","8722",,,"246","253",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84921854226&doi=10.1007%2f978-3-319-10554-3_25&partnerID=40&md5=b4c54512a7fb7372c5bb1237b67c5b7b","Test Case prioritization having a key role to play in prioritizing test scenarios from a pile of scenarios, to best of our knowledge, has not been employed in Agile environment for prioritizing test cases in Automated Test Plans. Considering automated testing in agile environment esp scrum, a prioritized test plan containing high priority test cases is emanated using Genetic Algorithms. This prioritization is courtesy to base factors such as operational profile, test scenario criticality, and faults uncovered by each test case; used to weight test scenarios. Proposed technique exhibits great performance by ameliorating the rate of fault detection by dynamically prioritizing NUnit based test scenarios. © Springer International Publishing Switzerland 2014.","Agile Testing; Automated Test Plans; Genetic Algorithms; Regression Testing; Test Case Prioritization","Automation; Fault detection; Genetic algorithms; Piles; Software testing; Agile manufacturing systems; Artificial intelligence; Agile environment; Agile testing; Automated test; Automated testing; Operational profile; Prioritization; Regression testing; Test case prioritization; Testing","Springer Verlag"
"López-Fernández J.J., Guerra E., De Lara J.","Meta-model validation and verification with metabest",2014,"ASE 2014 - Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering",,,,"831","834",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908617806&doi=10.1145%2f2642937.2648617&partnerID=40&md5=0f673c75061d06112cb04ca9f0707417","Meta-models play a cornerstone role in Model-Driven Engineering as they are used to define the abstract syntax of Domain-Specific Modelling Languages, and so models and all sorts of model transformations depend on them. However, there are scarce tools and methods supporting their validation and verification, which are essential activities for the proper engineering of meta-models. In this paper we present an Eclipse-based tool that aims to fill this gap by providing two complementary meta-model testing languages. The first one has similar philosophy to the xUnit framework, enabling the definition of meta-model unit test suites comprising model fragments and assertions on their (in-)correctness. The second one is directed to verify expected properties of the meta-model, including domain and design properties, quality criteria and platform-specific requirements. Both tools are integrated within a framework for example-based, incremental meta-model development. © 2014 ACM.","Example-based meta-modelling; Meta-modelling; Metamodel testing; Validation and verification (V&V)","Computational linguistics; Software engineering; Domain-Specific Modelling Languages; Meta model; Meta-modelling; Model transformation; Model-driven Engineering; Quality criteria; Tools and methods; Validation and verification; Modeling languages","Association for Computing Machinery, Inc"
"Cheng Y.-P., Fan C.-W.","Apply capture/replay to xunit testing",2014,"ICIC Express Letters, Part B: Applications","5","2",,"349","356",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893173999&partnerID=40&md5=96a1abecc28eea158fe83a45e15b0ae8","Adopting xUnit testing framework in software development often requires a lot of refactoring to the system under test (SUT). Contrast to system testing which can be performed by tools, xUnit testing is a coding activity which produces test code as the delivery. Test code, unfortunately, is subject to the maintenance problems like system code. In this paper, a prototype tool called CRUnit is proposed to alleviate the test overhead from adopting xUnit testing framework. CRUnit is a JUnit add-on, which can replace the hand-crafted assertions by a Capture/Replay process with the help from debuggers. Contrast to xUnit testing framework that treats a SUT as a blackbox, CRUnit probes the internal states of a SUT so that complicated hand-crafted assertions are no longer needed from test methods. This semi-automated process is achieved by introducing the verification power of human brain and human eyes with the help from ""visualizers"". © 2014 ISSN 2185-2766.","Capture/replay testing; Debugger; Xunit testing","Capture/replay; Debuggers; Internal state; Maintenance Problem; Prototype tools; System testing; System under test; Testing framework; Automation; Software engineering; Testing; Black-box testing",
"Abdelkarim T., Hassane H., Alaoui Ouatik S.E., Mohamed O., Brahim R.","Mobility in the nsis signaling protocol",2014,"International Journal on Communications Antenna and Propagation","4","5",,"215","220",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922808233&doi=10.15866%2firecap.v4i5.4414&partnerID=40&md5=29890757fb62041abb976cca06929d89","Providing mobile terminals with QoS (Quality of Service) in an all-IP environment requires a very extensive research. In integrated services networks, most of work is seeking to extend RSVP to a mobile environment. In this case, the article describes a new procedure for resource reservation in the wireless environment. It is based on the application of QoS NSLP signaling [1], following the work of the IETF NSIS (Next Steps In Signaling) WG. This is primarily based on a reservation Mspec(Mobility Specification) object that determines the future locations of the terminal which is included in a mobility profile. In this way, we can improve the QoS. © 2014 Praise Worthy Prize S.r.l. - All rights reserved.","Handover; Mobility; MSpec; NSIS; QOS; Signaling",,"Praise Worthy Prize S.r.l"
"Puri-Jobi S.","Test automation for NFC ICs using Jenkins and NUnit",2015,"2015 IEEE 8th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2015 - Proceedings",,,"7107414","","",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934344195&doi=10.1109%2fICSTW.2015.7107414&partnerID=40&md5=390fde48f8a4b6ae69472826d46dfbfc","This article gives a detailed overview of the setup of a test environment which is used for Near Field Communication (NFC) Integrated Circuits (ICs) at ams AG. The test environment is used for the verification and validation of the NFC ICs, as well as for pre-certification test runs, and is useable in two ways: (1) manual execution for every developer to be able to run tests on their desk before committing code changes and to reproduce failing test cases and (2) automated execution which is necessary for the Continuous Integration (CI) approach which is followed during development and to ensure that all tests are run against the Device Under Test (DUT). First a description of the system which shall be tested is given. Afterwards the used tools and methods to execute the various test benches are discussed. The hurdles which showed up during the process of setting up the environment for manual as well as automated execution are explained and the used solution is discussed. © 2015 IEEE.","Jenkins; NFC; NUnit; test automation","Automation; Design for testability; Integrated circuits; Near field communication; Timing circuits; Verification; Certification tests; Continuous integrations; Integrated circuits (ICs); Jenkins; NUnit; Test Automation; The near field communication (NFC); Verification-and-validation; Software testing","Institute of Electrical and Electronics Engineers Inc."
"Cordemans P., Steegmans E., Boydens J.","Deterministically testing actor-based concurrent software",2015,"6th International Workshop on Automating Test Case Design, Selection and Evaluation, A-TEST 2015 - Proceedings",,,,"26","30",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960430772&doi=10.1145%2f2804322.2804327&partnerID=40&md5=40d51cd8eb143030f75e70be64cc786d","Non-deterministic concurrent behavior of software prohibits the idempotent property of tests. XUnit frameworks tra- ditionally do not offer support to deal with these concur- rency issues which reduces the significance of unit testing concurrent software. In this paper we propose a tool which supports deterministic testing of concurrent software based on the Actor model. This tool reveals race conditions and seamlessly integrates with xUnit-like frameworks. In our approach, a Coloured Petri Net model is constructed per test as well as the code under test. This model allows iso- lation of concurrent behavior from the effective actor state. Subsequently, the state space is calculated and traces cov- ering all states are constructed. Corresponding with these traces our tool issues test runs, guaranteeing full state space coverage of each test. Moreover, each failed trace can be backtracked, revealing valuable information concerning the race condition. © 2015 ACM.","Actor model; Concurrent software; Deterministic testing","Hazards and race conditions; Petri nets; Actor models; Coloured Petri Nets; Concurrent behavior; Concurrent software; Idempotent; Information concerning; Test runs; Unit testing; Software testing","Association for Computing Machinery, Inc"
"Zhu H.","JFuzz: A Tool for Automated Java Unit Testing Based on Data Mutation and Metamorphic Testing Methods",2015,"Proceedings - 2nd International Conference on Trustworthy Systems and Their Applications, TSA 2015",,,"7335953","8","15",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961833432&doi=10.1109%2fTSA.2015.13&partnerID=40&md5=2c2cfc32f35712c19fc03ce7f82487d6","Automated test framework plays a significant role in test driven software development methodologies. The XUnit family of testing tools has been widely used in the industry. However, they are weak in supporting test case generation and test result checking. In this paper we propose a new kind of test automation framework by integrating data mutation testing and metamorphic testing methods. A tool for unit testing of Java class called JFuzz is presented. Its uses are illustrated by examples. © 2015 IEEE.","data mutation testing; fuzz testing; metamorphic testing; software testing; test automation framework; test driven development; test tools; unit test","Automation; Integration testing; Software design; Software engineering; Testing; Data mutation; Fuzz Testing; Metamorphic testing; Test automation frameworks; Test driven development; Test tools; Unit tests; Software testing","Institute of Electrical and Electronics Engineers Inc."
"Ramler R., Moser M., Pichler J.","Automated static analysis of unit test code",2016,"2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016","2016-January",,,"25","28",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045458018&doi=10.1109%2fSANER.2016.102&partnerID=40&md5=352706f6aa563b5f30f480d0b49e1fde","Automated unit tests are an essential software quality assurance measure that is widely used in practice. In many projects, thus, large volumes of test code have co-evolved with the production code throughout development. Like any other code, test code too may contain faults, affecting the effectiveness, reliability and usefulness of the tests. Furthermore, throughout the software system's ongoing development and maintenance phase, the test code too has to be constantly adapted and maintained. To support detecting problems in test code and improving its quality, we implemented 42 static checks for analyzing JUnit tests. These checks encompass best practices for writing unit tests, common issues observed in using xUnit frameworks, and our experiences collected from several years of providing trainings and reviews of test code for industry and in teaching. The checks can be run using the open source analysis tool PMD. In addition to a description of the implemented checks and their rationale, we demonstrate the applicability of using static analysis for test code by analyzing the unit tests of the open source project JFreeChart. © 2016 IEEE","Static analysis; Test code; Unit testing","Codes (symbols); Computer software selection and evaluation; Open source software; Open systems; Quality assurance; Software testing; Testing; Assurance measures; Automated units; Best practices; Large volumes; Software quality assurance; Software-systems; Test code; Unit testing; Unit tests; Writing units; Static analysis","Institute of Electrical and Electronics Engineers Inc."
"Zougari S., Tanana M., Lyhyaoui A.","Towards an automatic assessment system in introductory programming courses",2016,"Proceedings of 2016 International Conference on Electrical and Information Technologies, ICEIT 2016",,,"7519649","496","499",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84992212895&doi=10.1109%2fEITech.2016.7519649&partnerID=40&md5=1725a019151b8ba2ce3185d892805dfa","Nowadays, automatic assessment of programming assignments has become an important topic in academic research. In fact, the increasing number of enrolled students in programming courses created the need of a system providing immediate feedback to the learners and saving teachers from manually managing all the students' solutions. This paper presents an attempt to conduct programming exercises assessment both dynamically and statically to ensure a reliable and objective evaluation job. While dynamic analysis is based on xUnit framework, the static analysis is performed on the graph representation of the programs. © 2016 IEEE.","computer aided assessment; graph representation; programming assessment","Computer programming; Education; Teaching; Automatic assessment; Computer-aided assessment; Graph representation; Immediate feedbacks; Introductory programming course; Objective evaluation; Programming assignments; Programming exercise; Static analysis","Institute of Electrical and Electronics Engineers Inc."
"López-Fernández J.J., Guerra E., de Lara J.","Combining unit and specification-based testing for meta-model validation and verification",2016,"Information Systems","62",,,"104","135",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994525407&doi=10.1016%2fj.is.2016.06.008&partnerID=40&md5=7772fd714a0e7e19439e5c522439e791","Meta-models play a cornerstone role in Model-Driven Engineering as they are used to define the abstract syntax of modelling languages, and so models and all sorts of model transformations depend on them. However, there are scarce tools and methods supporting their Validation and Verification (V&V), which are essential activities for the proper engineering of meta-models. In order to fill this gap, we propose two complementary meta-model V&V languages. The first one has similar philosophy to the xUnit framework, as it enables the definition of meta-model unit test suites comprising model fragments and assertions on their (in-)correctness. The second one is directed to express and verify expected properties of a meta-model, including domain and design properties, quality criteria and platform-specific requirements. As a proof of concept, we have developed tooling for both languages in the Eclipse platform, and illustrate its use within an example-driven approach for meta-model construction. The expressiveness of our languages is demonstrated by their application to build a library of meta-model quality issues, which has been evaluated over the ATL zoo of meta-models and some OMG specifications. The results show that integrated support for meta-model V&V (as the one we propose here) is urgently needed in meta-modelling environments. © 2016 Elsevier Ltd","Domain-specific modelling languages; Meta-model quality; Meta-modelling; Model-driven engineering; Validation & verification","Software testing; Specifications; Domain-Specific Modelling Languages; Integrated supports; Meta model; Meta-modelling; Model transformation; Model-driven Engineering; Specification Based Testing; Validation and verification; Modeling languages","Elsevier Ltd"
"Gonzalez D., Santos J.C.S., Popovich A., Mirakhorli M., Nagappan M.","A Large-Scale Study on the Usage of Testing Patterns That Address Maintainability Attributes: Patterns for Ease of Modification, Diagnoses, and Comprehension",2017,"IEEE International Working Conference on Mining Software Repositories",,,"7962388","391","401",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026510051&doi=10.1109%2fMSR.2017.8&partnerID=40&md5=5e17bbdd3b0d41ca0e6141a97f266f93","Test case maintainability is an important concern, especially in open source and distributed development environments where projects typically have high contributor turn-over with varying backgrounds and experience, and where code ownership changes often. Similar to design patterns, patterns for unit testing promote maintainability quality attributes such as ease of diagnoses, modifiability, and comprehension. In this paper, we report the results of a large-scale study on the usage of four xUnit testing patterns which can be used to satisfy these maintainability attributes. This is a first-of-its-kind study which developed automated techniques to investigate these issues across 82,447 open source projects, and the findings provide more insight into testing practices in open source projects. Our results indicate that only 17% of projects had test cases, and from the 251 testing frameworks we studied, 93 of them were being used. We found 24% of projects with test files implemented patterns that could help with maintainability, while the remaining did not use these patterns. Multiple qualitative analyses indicate that usage of patterns was an ad-hoc decision by individual developers, rather than motivated by the characteristics of the project, and that developers sometimes used alternative techniques to address maintainability concerns. © 2017 IEEE.","Maintenance; Mining Software Repositories; Open Source; Unit Test Frameworks; Unit Test Patterns; Unit Testing","Maintainability; Maintenance; Open source software; Open systems; Testing; Automated techniques; Distributed development environments; Mining software repositories; Open source projects; Open sources; Qualitative analysis; Unit testing; Unit tests; Software testing","IEEE Computer Society"
"Burris J.W.","Test-driven development for parallel applications",2017,"Proceedings - 2017 2nd International Conference on Information Systems Engineering, ICISE 2017","2017-January",,,"27","31",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049250458&doi=10.1109%2fICISE.2017.20&partnerID=40&md5=e51b29f4fe98d318738c29f34680b403","This paper describes the use and benefits of the testdriven development paradigm in parallel application development. A brief background on test-driven development for traditional applications, techniques for parallel development, and the xUnit framework is given. This work then gives direction for using the given technologies for the development of parallel applications using the test-driven development process by mapping the functions of a parallel language to the functions of the testing framework as illustrated by a programming assignment given to college sophomores. © 2017 IEEE.","agile methodologies; parallel computing; test-driven development; unit testing","Information systems; Information use; Parallel processing systems; Agile Methodologies; Parallel application; Parallel development; Parallel languages; Programming assignments; Test driven development; Test driven development process; Unit testing; Systems engineering","Institute of Electrical and Electronics Engineers Inc."
"Vemula R.","Real-Time web application development: With ASP.NET core, SignalR, docker, and azure",2018,"Real-Time Web Application Development: With ASP.NET Core, SignalR, Docker, and Azure",,,,"1","598",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042424900&doi=10.1007%2f978-1-4842-3270-5&partnerID=40&md5=df41eedb9d23853a58658f1fca199cdb","Design, develop, and deploy a real-world web application by leveraging modern open source technologies. This book shows you how to use ASP.NET Core to build cross-platform web applications along with SignalR to enrich the application by enabling real-time communication between server and clients. You will use Docker to containerize your application, integrate with GitHub to package the application, and provide continuous deployment to Azure’s IaaS platform. Along the way, Real-Time Web Application Development covers topics including designing a Materialize CSS theme, using a test-driven development approach with xUnit.net, and securing your application with the OAuth 2.0 protocol. To further your understanding of the technology, you will learn logging and exception handling; navigation using view components; and how to work with forms and validations. The rich code samples from this book can be used to retrofit or upgrade existing ASP.NET Core applications. What You Will Learn Design and develop a real-world web application Implement security and data storage with OAuth2 and Azure Table StorageOrchestrate real-time notifications through SignalRUse GitHub and Travis CI for continuous integration of code Master Docker containerization and continuous deployment with Docker Cloud to Azure Linux virtual machines. Who This Book Is For Developers and software engineers interested in learning an end-to-end approach to application development using Microsoft technologies. © 2017 by Rami Vemula.",".Net; .Netcore; ASP.Net; Azure; Core; Docker; Realtime; Signalr; Webdev","Application programs; Computer operating systems; Containers; Digital storage; Open source software; .Net; .Netcore; ASP.NEt; Azure; Core; Docker; Real time; Signalr; Webdev; Web services","Apress Media LLC"
"Debroy V., Brimble L., Yost M., Erry A.","Automating Web Application Testing from the Ground Up: Experiences and Lessons Learned in an Industrial Setting",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,"354","362",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048453978&doi=10.1109%2fICST.2018.00042&partnerID=40&md5=ec31fbfde0ac7dd7dbeed5636d1bc145","Automating web application testing is a very tricky process due to inherent complexity, dynamic behavior(s) in web pages, differences in the way browsers render the same content (especially on different form factors), and so on. Yet manual testing is not a practical option, and such automation is a must in the interests of effectiveness and efficiency, because of the large number of browsers/devices that users can choose from, and also given the rapid software development cycles of today. This paper discusses our efforts at Varidesk to automate web tests against our main website-which offers many features and content, but is also a true eCommerce site where users from around the globe can purchase a very broad variety of active workspace solutions that we offer. Our solution was developed in-house, from the ground up, and leveraged and extended freely available automation and test libraries such as Selenium WebDriver and NUnit respectively. We talk about the challenges we faced and how we overcame them, as well as provide technical insights on real-world concerns such as managing test brittleness, and integrating the web tests into an existing Continuous Integration and Continuous Deployment (CI/CD) pipeline. Part of the novelty of this paper is that we are also transparent on the rationale behind our decision to build versus buy, and how we managed resources, especially in terms of cost. We also present lessons learned, and encouraged by the success that we have observed, hope that the results will be beneficial to academia and practitioners alike. © 2018 IEEE.","automation; industry experience; web application testing; web testing","Automation; Digital libraries; Fracture mechanics; Software design; Verification; Websites; Continuous integrations; Effectiveness and efficiencies; Industrial settings; Industry experience; Inherent complexity; Software development cycles; Web application testing; Web testing; Software testing","Institute of Electrical and Electronics Engineers Inc."
"Pires J.P., Brito E Abreu F.","Knowledge Discovery Metamodel-Based Unit Test Cases Generation",2018,"Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation, ICST 2018",,,,"432","433",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048435589&doi=10.1109%2fICST.2018.00056&partnerID=40&md5=447970ad7b89dd6b093bca2a149d5dcc","Existing unit test cases generative approaches are language-dependent. In this document we propose a novel approach, dubbed KDM2xUnit that will allow the generation of test suites matching the xUnit framework, using several transformations and Knowledge Discovery Metamodel (KDM) compliant models as a common intermediate representation for existing software systems and their operating environments. © 2018 IEEE.","KDM; Knowledge Discovery Metamodel; model-based testing; test cases generation; unit tests; xUnit","Model checking; Testing; Meta model; Model based testing; Test cases generation; Unit tests; xUnit; Software testing","Institute of Electrical and Electronics Engineers Inc."
"Kligvasser I., Shaham T.R., Michaeli T.","XUnit: Learning a Spatial Activation Function for Efficient Image Restoration",2018,"Proceedings of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition",,,"8578356","2433","2442",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062820759&doi=10.1109%2fCVPR.2018.00258&partnerID=40&md5=fec614707b4293b96b8a20c010b54064","In recent years, deep neural networks (DNNs) achieved unprecedented performance in many low-level vision tasks. However, state-of-the-art results are typically achieved by very deep networks, which can reach tens of layers with tens of millions of parameters. To make DNNs implemen-table on platforms with limited resources, it is necessary to weaken the tradeoff between performance and efficiency. In this paper, we propose a new activation unit, which is particularly suitable for image restoration problems. In contrast to the widespread per-pixel activation units, like ReLUs and sigmoids, our unit implements a learnable nonlinear function with spatial connections. This enables the net to capture much more complex features, thus requiring a significantly smaller number of layers in order to reach the same performance. We illustrate the effectiveness of our units through experiments with state-of-the-art nets for denoising, de-raining, and super resolution, which are already considered to be very small. With our approach, we are able to further reduce these models by nearly 50% without incurring any degradation in performance. © 2018 IEEE.",,"Chemical activation; Computer vision; Deep neural networks; Restoration; Activation functions; De-noising; Image restoration problem; Low-level vision; Nonlinear functions; Number of layers; State of the art; Super resolution; Image reconstruction","IEEE Computer Society"
"Cabello S., Jain K., Lubiw A., Mondal D.","Minimum shared-power edge cut",2020,"Networks","75","3",,"321","333",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079034948&doi=10.1002%2fnet.21928&partnerID=40&md5=744cb992219bf0f92f99dfdfa738cfcb","We introduce a problem called minimum shared-power edge cut (MSPEC). The input to the problem is an undirected edge-weighted graph with distinguished vertices s and t, and the goal is to find an s-t cut by assigning “powers” at the vertices and removing an edge if the sum of the powers at its endpoints is at least its weight. The objective is to minimize the sum of the assigned powers. MSPEC is a graph generalization of a barrier coverage problem in a wireless sensor network: given a set of unit disks with centers in a rectangle, what is the minimum total amount by which we must shrink the disks to permit an intruder to cross the rectangle undetected, that is, without entering any disk. This is a more sophisticated measure of barrier coverage than the minimum number of disks whose removal breaks the barrier. We develop a fully polynomial time approximation scheme for MSPEC. We give polynomial time algorithms for the special cases where the edge weights are uniform, or the power values are restricted to a bounded set. Although MSPEC is related to network flow and matching problems, its computational complexity (in P or NP-hard) remains open. © 2020 Wiley Periodicals, Inc.","activation network; barrier coverage; fully polynomial-time approximation scheme; s-t cut; wireless network","Polynomial approximation; Wireless networks; Barrier coverages; Edge weights; Edge-weighted graph; Fully polynomial time approximation schemes; Matching problems; Network flows; Polynomial-time algorithms; s-t cut; Wireless sensor networks","Wiley-Liss Inc."
"Malaviya H., Shah J., Patel M., Munshi J., Patil H.A.","Mspec-Net : Multi-Domain Speech Conversion Network",2020,"ICASSP, IEEE International Conference on Acoustics, Speech and Signal Processing - Proceedings","2020-May",,"9052966","7764","7768",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85089232481&doi=10.1109%2fICASSP40776.2020.9052966&partnerID=40&md5=8698e2841a7750f3c940190402a55477","In this paper, we present a multi-domain speech conversion technique by proposing a Multi-domain Speech Conversion Network (MSpeC-Net) architecture for solving the less-explored area of Non-Audible Murmur-to-SPeeCH (NAM2-SPCH) conversion. The murmur produced by the speaker and captured by the NAM microphone undergoes speech quality degradation. Hence, NAM2SPCH conversion becomes a necessary and challenging task for improving the intelligibility of NAM signal. MSpeC-Net contains three domain-specific autoencoders. The multiple encoder-decoders are aligned using latent consistency loss in such a way that the desired conversion is achieved by using the source encoder and target decoder only. We have performed zero-pair NAM2SPCH conversion using the interaction between source encoder and the target decoder. We evaluated our proposed method using both objective and subjective evaluations. With a Mean Opinion Score of 3.26 and 3.12 on an average in a direct NAM2SPCH, and an indirect NAM2SPCH (i.e., NAM-to-whisper-to-speech) conversion, respectively. MSpeC-Net achieves the perceptually significant improvement for NAM2SPCH conversion system. © 2020 IEEE.","Autoencoder; GAN; MSpeC-Net; Non-Audible-Murmur; Whisper","Decoding; Signal encoding; Speech; Speech communication; Conversion systems; Domain specific; Encoder-decoder; Mean opinion scores; Non-audible murmur; Objective and subjective evaluations; Speech conversion; Speech quality; Audio signal processing","Institute of Electrical and Electronics Engineers Inc."
"Boonna P., Chaiwan C., Deepaisarn S., Simanon N., Reamtong O., Butkinaree C.","Implementing Machine Learning Methods for Ballpoint Pen Ink Classification based on Mass Spectrometry Data: Toward a Forensic Application",2021,"JCSSE 2021 - 18th International Joint Conference on Computer Science and Software Engineering: Cybernetics for Human Beings",,,"9493823","","",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85112379033&doi=10.1109%2fJCSSE53117.2021.9493823&partnerID=40&md5=e6b97fb5112284e107c88ff4acd4958b","Mass spectrometry (MS) is widely used for material analysis in various applications including forensic science. This work explores computational techniques and develops an application called ""MSpec""using suitable algorithms for extracting informative parts of the MS dataset that aims towards pen ink classification. The system is intended as a tool that is capable of giving preliminary answers for such forensic analyses of documentary evidence involving different pen-ink types on writing. Support Vector Machine (SVM) was implemented and compared with other machine learning techniques via systematic performance assessments. They were trained and tested using MS data acquired from 10 blue-ink ballpoint pen samples, which were pre-processed using optimized steps. The results show that the tested models performed well in classifying the pen ink samples, with the SVM cubic kernel model giving the highest accuracy of 96.0%. Furthermore, dimensionality reduction of the dataset through peak detection helps improve the classification accuracy. © 2021 IEEE.","Data Science; Forensic Analysis; Machine Learning; Mass Spectrometry; Multivariate Data; Pen Ink Classification; SVM","Classification (of information); Digital forensics; Dimensionality reduction; Forensic engineering; Mass spectrometry; Software engineering; Support vector machines; Classification accuracy; Computational technique; Forensic applications; Machine learning methods; Machine learning techniques; Mass spectrometry data; Material analysis; Performance assessment; Learning systems","Institute of Electrical and Electronics Engineers Inc."
"Christopher P.J., Kadis A., Gordon G.S.D., Wilkinson T.D.","HoloGen: An open-source toolbox for high-speed hologram generation",2022,"Computer Physics Communications","270",,"108139","","",,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-85114364163&doi=10.1016%2fj.cpc.2021.108139&partnerID=40&md5=b91cccdc56e72b69045464c78505afa6","The rise of virtual and augmented reality systems has prompted an increase in interest in the fields of 2D and 3D computer-generated holography (CGH). The numerical processing required to generate a hologram is high and requires significant domain expertise. This has historically slowed the adoption of CGH in emerging fields. In this paper we introduce HoloGen, an open-source Cuda C and [Formula presented] framework for computer-generated holography. HoloGen unites, for the first time, a wide array of existing hologram generation algorithms with state of the art performance while attempting to remain intuitive and easy to use. This is enabled by a [Formula presented] and Windows Presentation Framework (WPF) graphical user interface (GUI). A novel reflection based parameter hierarchy is used to ensure ease of modification. Extensive use of [Formula presented] templates based on the Standard Template Library (STL), compile time flexibility is preserved while maintaining runtime performance. The current release of HoloGen unites implementations of well known generation algorithms including Gerchberg-Saxton (GS), Liu-Taghizadeh (LT), direct search (DS), simulated annealing (SA) and one-step phase-retrieval (OSPR) with less known specialist variants including weighted GS and Adaptive OSPR. Benchmarking results are presented for several key algorithms. The software is freely available under an MIT license. Program summary: Program title: HoloGen v2.2.1.17177 CPC Library link to program files: https://doi.org/10.17632/nzk4swwsrg.1 Developer's repository link: https://gitlab.com/CMMPEOpenAccess/HoloGen Licensing provisions: MIT Programming language: Cuda, [Formula presented], [Formula presented] External packages: Cuda, ManagedCuda, MathNet, Newtonsoft.Json, NUnit, AForge, Accord, ClosedXML, CefSharp, PdfiumViewer, Xceed, NHotkey, SharpDX, MaterialSkin, Xamarin.forms, HelixToolkit, Dragablz, LiveCharts, MahApps Nature of problem: Hologram generation for two-dimensional Fourier and Fresnel holograms displayed on amplitude or phase modulating spatial light modulators with binary or multi-level control Solution method: Algorithmic variants including Gerchberg-Saxton, Liu-Taghizadeh, Direct Search, Simulated Annealing and One-Step Phase-Retrieval. Includes real-time reporting, batch processing and complex field manipulation Additional comments include restrictions and unusual features: Graphical user interface only exposes access to two-dimensional hologram generation. Includes a novel reflection based parameter hierarchy for ease of modification. © 2021 Elsevier B.V.","Computer-generated holography; Direct search; Gerchberg-Saxton; Iterative Fourier transform algorithm; Liu-Taghizadeh; One-step phase-retrieval; Optics; Simulated annealing","Computer generated holography; Graphical user interfaces; Holograms; HTTP; Iterative methods; Open source software; Computer-generated holography; Direct search; Generation algorithm; Gerchberg-Saxton; Iterative Fourier transform algorithms; Liu-taghizadeh; One-step phase-retrieval; Open source toolboxes; Phase retrieval; Two-dimensional; Simulated annealing","Elsevier B.V."
